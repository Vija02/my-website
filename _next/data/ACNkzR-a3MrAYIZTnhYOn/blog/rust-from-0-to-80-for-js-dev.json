{"pageProps":{"title":"Rust from 0 to 80% for JavaScript Developers","description":"Learn Rust to 80% in 5 minutes by leveraging your existing JavaScript knowledge. In this article, I list a number of differences Rust has compared to JS that is crucial to understanding it.","image":"/assets/blog/rust-from-0-to-80-for-js-dev/rust-from-0-to-80-for-js-dev-banner.jpg","createdAt":"Sun May 01 2022 01:00:00 GMT+0100 (British Summer Time)","source":{"compiledSource":"var m=Object.defineProperty,u=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var p=(t,a,n)=>a in t?m(t,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[a]=n,e=(t,a)=>{for(var n in a||(a={}))i.call(a,n)&&p(t,n,a[n]);if(r)for(var n of r(a))s.call(a,n)&&p(t,n,a[n]);return t},l=(t,a)=>u(t,d(a));var h=(t,a)=>{var n={};for(var o in t)i.call(t,o)&&a.indexOf(o)<0&&(n[o]=t[o]);if(t!=null&&r)for(var o of r(t))a.indexOf(o)<0&&s.call(t,o)&&(n[o]=t[o]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var o=n,{components:t}=o,a=h(o,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),a),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"This is a list of topic that will help you understand \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.rust-lang.org/\"}),\"Rust\"),\" quickly if you are a JavaScript developer. There are a lot of tutorial that start from scratch. But if you already know something else, why not compare them?\"),mdx(\"p\",null,\"These are differences that I wished I could refer to before starting Rust, kept short.\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"Disclaimer!\")),mdx(\"p\",null,\"I\\u2019m very far from being well versed in Rust. These are how I interpret them and no more than that. Rust\\u2019s documentation are vast so if you\\u2019re looking for details, please google them instead. \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://doc.rust-lang.org/book/title-page.html\"}),\"The book is also a good starting point for learning rust\"),\". My goal is to list the important things so that you (and me in the future) can skip common programming concepts and focus on the differences based on the knowledge you already know.\"),mdx(\"h2\",null,\"Types\"),mdx(\"p\",null,\"Rust is a typed language so it\\u2019s closer to TypeScript. You\\u2019ll have a much better experience if you already know TS.\"),mdx(\"p\",null,\"For the most part syntax are similar (\",mdx(\"strong\",{parentName:\"p\"},\"variable_name: Type\"),\") horray!\"),mdx(\"h2\",null,\"snake_case\"),mdx(\"p\",null,\"Yep, no getting around it.\"),mdx(\"h2\",null,\"What\\u2019s this symbol?\"),mdx(\"h3\",null,\"1. Question mark (\",mdx(\"strong\",{parentName:\"h3\"},\"?\"),\")\"),mdx(\"p\",null,\"You may see \",mdx(\"strong\",{parentName:\"p\"},\"?\"),\" after a function call like so: \",mdx(\"inlineCode\",{parentName:\"p\"},\"my_function()?;\"),\".\"),mdx(\"p\",null,\"No, it\\u2019s not optional chaining. \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://stackoverflow.com/a/42921174/3101690\"}),\"It\\u2019s an error handling magic for functions that can fail (fallible functions)\"),\". You'll commonly see this when dealing with asynchronous functions. More about this later.\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://rust-lang.github.io/async-book/07_workarounds/02_err_in_async_blocks.html\"}),\"Documentation\")),mdx(\"h3\",null,\"2. Exclamation mark on functions (\",mdx(\"strong\",{parentName:\"h3\"},\"!\"),\")\"),mdx(\"p\",null,\"Example: \",mdx(\"inlineCode\",{parentName:\"p\"},'println!(\"{:?}\", my_variable);')),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://doc.rust-lang.org/book/ch19-06-macros.html\"}),\"This indicates that it\\u2019s a macro\"),\". JS doesn't have anything similar to this. Macros are a way of writing code that writes other code. You can think of it like a custom syntactic sugar. Just use it if the function example shows it.\"),mdx(\"h3\",null,\"3. The \",mdx(\"strong\",{parentName:\"h3\"},\"&\"),\" symbol\"),mdx(\"p\",null,\"Example: \",mdx(\"inlineCode\",{parentName:\"p\"},\"&your_variable\")),mdx(\"p\",null,\"To get the reference. You\\u2019ll know this if you used low level languages like C. More later.\"),mdx(\"h2\",null,\"Syntax\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Semicolon (\",mdx(\"strong\",{parentName:\"li\"},\";\"),\") at the end of each line is mandatory\"),mdx(\"li\",{parentName:\"ol\"},\"Exception: Semicolon (\",mdx(\"strong\",{parentName:\"li\"},\";\"),\") is not mandatory on the last line of a function. In this case, \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://doc.rust-lang.org/std/keyword.return.html\"}),\"it\\u2019s a shortcut for returning that line\"),\".\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://doc.rust-lang.org/book/ch03-03-how-functions-work.html\"}),\"Function syntax is slightly different\"),\". Not a big deal.\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-rust\"}),`fn foo(num: i32) -> i32 {\n  3 // See no.2\n  // or\n  // return 3;\n}\n`)),mdx(\"ol\",e({},{start:4}),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://doc.rust-lang.org/reference/attributes.html\"}),\"Decorator syntax also different\"),\". It\\u2019s also called \",mdx(\"strong\",{parentName:\"li\"},\"Attributes.\"))),mdx(\"h2\",null,\"What are these keywords?\"),mdx(\"h3\",null,\"struct\"),mdx(\"p\",null,\"It\\u2019s a JSON object. (Ok maybe more complicated but see the docs for that)\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`type Person = {\n  firstName: string;\n  lastName: string;\n};\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-rust\"}),`struct Person {\n    first_name: String,\n    last_name: String,\n}\n`)),mdx(\"h3\",null,mdx(\"strong\",{parentName:\"h3\"},\"trait\")),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://doc.rust-lang.org/book/ch10-02-traits.html?highlight=trait#traits-as-parameters\"}),\"An interface\")),mdx(\"h3\",null,\"impl\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://doc.rust-lang.org/book/ch10-02-traits.html\"}),\"An implementation of trait\"),\". The closest thing we have to this are classes. It's the link between a \",mdx(\"inlineCode\",{parentName:\"p\"},\"trait\"),\" and a type. \",mdx(\"em\",{parentName:\"p\"},\"I\\u2019ve not used it\")),mdx(\"h3\",null,\"enum\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html?highlight=enum#enum-values\"}),\"Quite similar to Typescript enums in a way\"),\". But you can store data in it. It\\u2019s pretty neat and quite an important concept to understand for async.\"),mdx(\"h2\",null,\"Console.log\"),mdx(\"p\",null,\"Not as easy unfortunately. \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://doc.rust-lang.org/std/fmt/index.html\"}),\"More like \",mdx(\"strong\",{parentName:\"a\"},\"printf\"),\" from other languages\")),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},'println!(\"{:?}\", my_variable);')),mdx(\"h2\",null,\"Library/Dependencies\"),mdx(\"p\",null,\"Use \",mdx(\"inlineCode\",{parentName:\"p\"},\"Cargo.toml\"),\" instead of \",mdx(\"inlineCode\",{parentName:\"p\"},\"package.json\"),\". \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/rust-lang/cargo/issues/4\"}),\"You\\u2019ll want to add them manually\"),\" (instead of using a command like \",mdx(\"inlineCode\",{parentName:\"p\"},\"yarn add\"),\")\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html\"}),\"Documentation\")),mdx(\"p\",null,\"Example:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-toml\"}),`[dependencies]\nchrono = \"0.4\"\negg-mode = \"0.16.0\"\n`)),mdx(\"h2\",null,\"Importing\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html?highlight=module#defining-modules-to-control-scope-and-privacy\"}),\"Rust has modules\"),\". It\\u2019s quite different from JS but basically:\"),mdx(\"p\",null,\"They\\u2019re sort of like namespaces. Here\\u2019s a breakdown on importing a dependency\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"use rocket::serde::{json::Json, Deserialize, Serialize};\")),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"use\")),\" - use this instead of \",mdx(\"inlineCode\",{parentName:\"p\"},\"import\")),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"rocket\"),\" - this is the package name\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"::\"),\" - accessing a module\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"serde\"),\" - the module name\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"{json::Json, Deserialize, Serialize}\"),\" - things to actually import\"),mdx(\"p\",null,\"Some more syntax:\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"use chrono::prelude::*;\")),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"use rusqlite::Result;\")),mdx(\"h2\",null,\"Importing from local files\"),mdx(\"p\",null,\"Best explanation: \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://doc.rust-lang.org/rust-by-example/mod/split.html\"}),\"https://doc.rust-lang.org/rust-by-example/mod/split.html\")),mdx(\"p\",null,\"Use \",mdx(\"inlineCode\",{parentName:\"p\"},\"mod\"),\" to the path/file you want to import to make the compiler include the module.\"),mdx(\"p\",null,\"Then \",mdx(\"inlineCode\",{parentName:\"p\"},\"use\"),\" to import it. Note: \",mdx(\"inlineCode\",{parentName:\"p\"},\"mod\"),\" automatically imports it too. In this case, you will need prefix it with \",mdx(\"inlineCode\",{parentName:\"p\"},\"crate\"),\".\"),mdx(\"p\",null,\"Example:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-rust\"}),`use crate::your_file_or_module;\n`)),mdx(\"p\",null,\"Note: \",mdx(\"inlineCode\",{parentName:\"p\"},\"mod.rs\"),\" is a special filename which acts like \",mdx(\"inlineCode\",{parentName:\"p\"},\"index.js\")),mdx(\"p\",null,\"See the link above for examples.\"),mdx(\"h2\",null,\"Const vs let\"),mdx(\"p\",null,\"In JavaScript you\\u2019d use \",mdx(\"strong\",{parentName:\"p\"},\"const\"),\" most of the time because it\\u2019s immutable.\"),mdx(\"p\",null,\"In Rust, you\\u2019ll want to use \",mdx(\"strong\",{parentName:\"p\"},\"let\"),\" instead. This is immutable by default. If you want it to be mutable, use \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html\"}),\"mut\"),\" keyword. \",mdx(\"strong\",{parentName:\"p\"},\"const\"),\" are reserved for actual constants (so you can\\u2019t calculate the value from another variable)\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-rust\"}),`let immutable_variable = ...;\nlet mut mutable_variable = ...;\nconst MY_CONSTANT = \"CONSTANT\";\n`)),mdx(\"h2\",null,\"Library Documentation\"),mdx(\"p\",null,\"If the Github repo doesn\\u2019t link to the documentation page, you can probably get to it like this:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/assets/blog/rust-from-0-to-80-for-js-dev/1.png\",alt:\"Untitled\"}))),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/assets/blog/rust-from-0-to-80-for-js-dev/2.png\",alt:\"Untitled\"}))),mdx(\"h2\",null,\"Asynchronous\"),mdx(\"p\",null,\"By far, the 2 most confusing topic are \",mdx(\"strong\",{parentName:\"p\"},\"futures\"),\" and \",mdx(\"strong\",{parentName:\"p\"},\"ownership\"),\". I would recommend reading a more comprehensive documentation for these. Let\\u2019s talk about futures first.\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"Future\"),\" is like a \",mdx(\"inlineCode\",{parentName:\"p\"},\"Promise\"),\". Unlike JS, Rust has a type for the result of the promise/future called \",mdx(\"inlineCode\",{parentName:\"p\"},\"Result\"),\". It also accepts the error type on the generics (I wish JS has this). You can also use \",mdx(\"inlineCode\",{parentName:\"p\"},\"Result\"),\" on its own without \",mdx(\"inlineCode\",{parentName:\"p\"},\"future\"),\".\"),mdx(\"h3\",null,\"Executing (or \\u201Cconsuming\\u201D) Future\"),mdx(\"p\",null,\"The standard library is quite barebones so you\\u2019ll need to import something else (Think \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/petkaantonov/bluebird\"}),\"bluebird\"),\" for JS). You need an executor to run a \",mdx(\"inlineCode\",{parentName:\"p\"},\"future\"),\". I recommend using \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/tokio-rs/tokio\"}),\"https://github.com/tokio-rs/tokio\"),\" and reading their documentation.\"),mdx(\"h3\",null,mdx(\"inlineCode\",{parentName:\"h3\"},\".await\"),\" to await a function\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"async_function().await;\"),\" Interesting syntax, yeah? Actually quite nice since you don\\u2019t have to wrap it with brackets like in JS.\"),mdx(\"h3\",null,\"Handling Result\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html\"}),\"This is another important one\"),\". Rust is safe so you\\u2019ll need to handle everything. Yes, all error cases unlike JS!\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"Result\"),\" enum has \",mdx(\"inlineCode\",{parentName:\"p\"},\"Ok\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"Err\"),\". If the future is successful, it returns \",mdx(\"inlineCode\",{parentName:\"p\"},\"Ok\"),\", otherwise \",mdx(\"inlineCode\",{parentName:\"p\"},\"Err\"),\".\"),mdx(\"p\",null,\"Most comprehensive way to handle both cases:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-rust\"}),`let f = File::open(\"hello.txt\");\n\nlet mut f = match f {\n    Ok(file) => file,\n    Err(e) => return Err(e),\n};\n`)),mdx(\"p\",null,\"The above uses the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html\"}),\"pattern matching syntax which is also great\"),\".\"),mdx(\"p\",null,\"This is quite verbose so there are 2 common ways to shorten it:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Using \",mdx(\"inlineCode\",{parentName:\"li\"},\".unwrap()\"))),mdx(\"p\",null,\"Example: \",mdx(\"inlineCode\",{parentName:\"p\"},\"let my_value = async_function().await.unwrap();\")),mdx(\"p\",null,\"This \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://stackoverflow.com/a/36362163/3101690\"}),\"gets the success value and panics if Err\")),mdx(\"p\",null,\"Use this only when you\\u2019re confident that it won\\u2019t error or in test environment.\"),mdx(\"ol\",e({},{start:2}),mdx(\"li\",{parentName:\"ol\"},\"Using the \",mdx(\"inlineCode\",{parentName:\"li\"},\"?\"),\" syntax\")),mdx(\"p\",null,\"This passes the error up. So your function needs to be able to return an error too (either a \",mdx(\"inlineCode\",{parentName:\"p\"},\"Result\"),\" or an \",mdx(\"inlineCode\",{parentName:\"p\"},\"Option\"),\")\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://stackoverflow.com/a/42921174/3101690\"}),\"See this for example and its equivalent\")),mdx(\"h2\",null,\"Ownership & References\"),mdx(\"p\",null,\"Heard of the borrow checker? Nothing much for me to say here. It\\u2019s the hardest thing in this list since it\\u2019s unique to rust. And if you\\u2019ve never handled references before, this topic might be a bit steep.\"),mdx(\"p\",null,\"Thankfully the rust book saves the day once again\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html\"}),\"Basically: Read part 4.1, 4.2 and 4.3\")),mdx(\"h2\",null,\"And that\\u2019s it!\"),mdx(\"p\",null,\"This list is actually shorter than I expected. I hope it\\u2019s useful for your journey.\"),mdx(\"p\",null,\"See a mistake or have any suggestions? Let me know!\"),mdx(\"hr\",null),mdx(\"p\",null,\"Special thanks to everyone that suggested corrections.  \"),mdx(\"p\",null,\"Check out this article in \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://news.ycombinator.com/item?id=31220791\"}),\"Hacker News\")))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}